// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT id, hashed_password 
FROM users
WHERE email = ?
`

type AuthenticateUserRow struct {
	ID             string `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) AuthenticateUser(ctx context.Context, email string) (AuthenticateUserRow, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, email)
	var i AuthenticateUserRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, email, hashed_password, created)
VALUES(?, ?, ?, ?, DATETIME('now', 'utc'))
`

type CreateUserParams struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.HashedPassword,
	)
	return err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
  SELECT true
  FROM users
  WHERE id = ?
)
`

func (q *Queries) UserExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
