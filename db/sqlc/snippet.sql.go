// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: snippet.sql

package sqlc

import (
	"context"
	"time"
)

const createSnippet = `-- name: CreateSnippet :exec
INSERT INTO snippets (id, title, content, created, expires)
VALUES(?, ?, ?, DATETIME('now', 'utc'), ?)
`

type CreateSnippetParams struct {
	ID      string    `json:"id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Expires time.Time `json:"expires"`
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) error {
	_, err := q.db.ExecContext(ctx, createSnippet,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Expires,
	)
	return err
}

const getSnippet = `-- name: GetSnippet :one
SELECT id, title, content, expires, created
FROM snippets
WHERE expires > DATETIME('now', 'utc') AND id = ?
`

func (q *Queries) GetSnippet(ctx context.Context, id string) (Snippets, error) {
	row := q.db.QueryRowContext(ctx, getSnippet, id)
	var i Snippets
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Expires,
		&i.Created,
	)
	return i, err
}

const latestSnippets = `-- name: LatestSnippets :many
SELECT id, title, content, expires, created
FROM snippets
WHERE expires > DATETIME('now', 'utc') ORDER BY created DESC LIMIT 10
`

func (q *Queries) LatestSnippets(ctx context.Context) ([]Snippets, error) {
	rows, err := q.db.QueryContext(ctx, latestSnippets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Snippets{}
	for rows.Next() {
		var i Snippets
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Expires,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
